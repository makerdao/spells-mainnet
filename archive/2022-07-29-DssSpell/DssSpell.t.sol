// SPDX-FileCopyrightText: Â© 2020 Dai Foundation <www.daifoundation.org>
// SPDX-License-Identifier: AGPL-3.0-or-later
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

pragma solidity 0.6.12;

import "./DssSpell.t.base.sol";

interface RwaLiquidationLike {
    function ilks(bytes32) external returns (string memory, address, uint48 toc, uint48 tau);
    function bump(bytes32 ilk, uint256 val) external;
    function tell(bytes32) external;
    function cure(bytes32) external;
    function cull(bytes32, address) external;
    function good(bytes32) external view returns (bool);
}

interface RwaUrnLike {
    function can(address) external view returns (uint256);
    function lock(uint256) external;
    function draw(uint256) external;
    function wipe(uint256) external;
    function free(uint256) external;
}

interface RwaOutputConduitLike {
    function can(address) external view returns (uint256);
    function may(address) external view returns (uint256);
    function pick(address) external;
    function push() external;
}

interface RwaInputConduitLike {
    function may(address) external view returns (uint256);
    function push() external;
}

contract DssSpellTest is DssSpellTestBase {

    function testSpellIsCast_GENERAL() public {
        string memory description = new DssSpell().description();
        assertTrue(bytes(description).length > 0, "TestError/spell-description-length");
        // DS-Test can't handle strings directly, so cast to a bytes32.
        assertEq(stringToBytes32(spell.description()),
                stringToBytes32(description), "TestError/spell-description");

        if(address(spell) != address(spellValues.deployed_spell)) {
            assertEq(spell.expiration(), block.timestamp + spellValues.expiration_threshold, "TestError/spell-expiration");
        } else {
            assertEq(spell.expiration(), spellValues.deployed_spell_created + spellValues.expiration_threshold, "TestError/spell-expiration");

            // If the spell is deployed compare the on-chain bytecode size with the generated bytecode size.
            // extcodehash doesn't match, potentially because it's address-specific, avenue for further research.
            address depl_spell = spellValues.deployed_spell;
            address code_spell = address(new DssSpell());
            assertEq(getExtcodesize(depl_spell), getExtcodesize(code_spell), "TestError/spell-codesize");
        }

        assertTrue(spell.officeHours() == spellValues.office_hours_enabled, "TestError/spell-office-hours");

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done(), "TestError/spell-not-done");

        checkSystemValues(afterSpell);

        checkCollateralValues(afterSpell);
    }

    struct Payee {
        address addr;
        uint256 amount;
    }

    function testPayments() private { // make public to use
        uint256 prevSin = vat.sin(address(vow));

        // For each payment, create a Payee object with
        //    the Payee address,
        //    the amount to be paid in whole Dai units
        // Initialize the array with the number of payees
        Payee[15] memory payees = [
            Payee(wallets.addr("GRO_WALLET"),       648_134),
            Payee(wallets.addr("FEEDBLACKLOOPS"),    11_573),
            Payee(wallets.addr("FLIPFLOPFLAP"),      11_528),
            Payee(wallets.addr("ULTRASCHUPPI"),      11_292),
            Payee(wallets.addr("MAKERMAN"),           9_366),
            Payee(wallets.addr("ACREINVEST"),         8_813),
            Payee(wallets.addr("JUSTINCASE"),         8_158),
            Payee(wallets.addr("GFXLABS"),            6_679),
            Payee(wallets.addr("DOO"),                5_075),
            Payee(wallets.addr("PENNBLOCKCHAIN"),     3_795),
            Payee(wallets.addr("FLIPSIDE"),           3_186),
            Payee(wallets.addr("CHRISBLEC"),          2_739),
            Payee(wallets.addr("BLOCKCHAINCOLUMBIA"), 2_150),
            Payee(wallets.addr("MHONKASALOTEEMULAU"),   704),
            Payee(wallets.addr("GOVERNANCEHOUSE"),      127)
        ];

        uint256 prevBalance;
        uint256 totAmount;
        uint256[] memory prevAmounts = new uint256[](payees.length);

        for (uint256 i = 0; i < payees.length; i++) {
            totAmount += payees[i].amount;
            prevAmounts[i] = dai.balanceOf(payees[i].addr);
            prevBalance += prevAmounts[i];
        }

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(vat.sin(address(vow)) - prevSin, totAmount * RAD);

        for (uint256 i = 0; i < payees.length; i++) {
            assertEq(
                dai.balanceOf(payees[i].addr) - prevAmounts[i],
                payees[i].amount * WAD
            );
        }
    }

    function testCollateralIntegrations() private { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Insert new collateral tests here
        checkIlkIntegration(
             "TOKEN-X",
             GemJoinAbstract(addr.addr("MCD_JOIN_TOKEN_X")),
             ClipAbstract(addr.addr("MCD_CLIP_TOKEN_X")),
             addr.addr("PIP_TOKEN"),
             true,
             true,
             false
        );
    }

    function testIlkClipper() private { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Insert new ilk clipper tests here
        checkIlkClipper(
            "TOKEN-X",
            GemJoinAbstract(addr.addr("MCD_JOIN_TOKEN_X")),
            ClipAbstract(addr.addr("MCD_CLIP_TOKEN_X")),
            addr.addr("MCD_CLIP_CALC_TOKEN_X"),
            OsmAbstract(addr.addr("PIP_TOKEN")),
            20_000 * WAD
        );
    }

    function testNewChainlogValues() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // RWA008
        checkChainlogKey("RWA008");
        checkChainlogKey("MCD_JOIN_RWA008_A");
        checkChainlogKey("RWA008_A_URN");
        checkChainlogKey("RWA008_A_OUTPUT_CONDUIT");
        checkChainlogKey("RWA008_A_INPUT_CONDUIT");
        checkChainlogKey("PIP_RWA008");

        // RWA009
        checkChainlogKey("RWA009_A_JAR");
        checkChainlogKey("RWA009");
        checkChainlogKey("MCD_JOIN_RWA009_A");
        checkChainlogKey("RWA009_A_URN");
        checkChainlogKey("RWA009_A_OUTPUT_CONDUIT");
        checkChainlogKey("PIP_RWA009");

        // RWA TOKEN FAB
        checkChainlogKey("RWA_TOKEN_FAB");

        checkChainlogVersion("1.13.3");
    }

    function testNewIlkRegistryValues() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // RWA008
        (, address pipRwa008,,) = oracle.ilks("RWA008-A");

        assertEq(reg.pos("RWA008-A"),    50);
        assertEq(reg.join("RWA008-A"),   addr.addr("MCD_JOIN_RWA008_A"));
        assertEq(reg.gem("RWA008-A"),    addr.addr("RWA008"));
        assertEq(reg.dec("RWA008-A"),    GemAbstract(addr.addr("RWA008")).decimals());
        assertEq(reg.class("RWA008-A"),  3);
        assertEq(reg.pip("RWA008-A"),    pipRwa008);
        assertEq(reg.name("RWA008-A"),   "RWA008-A: SG Forge OFH");
        assertEq(reg.symbol("RWA008-A"), GemAbstract(addr.addr("RWA008")).symbol());

        // RWA009
        (, address pipRwa009,,) = oracle.ilks("RWA009-A");

        assertEq(reg.pos("RWA009-A"),    51);
        assertEq(reg.join("RWA009-A"),   addr.addr("MCD_JOIN_RWA009_A"));
        assertEq(reg.gem("RWA009-A"),    addr.addr("RWA009"));
        assertEq(reg.dec("RWA009-A"),    GemAbstract(addr.addr("RWA009")).decimals());
        assertEq(reg.class("RWA009-A"),  3);
        assertEq(reg.pip("RWA009-A"),    pipRwa009);
        assertEq(reg.name("RWA009-A"),   "RWA009-A: H. V. Bank");
        assertEq(reg.symbol("RWA009-A"), GemAbstract(addr.addr("RWA009")).symbol());
    }

    function testFailWrongDay() public {
        require(spell.officeHours() == spellValues.office_hours_enabled);
        if (spell.officeHours()) {
            vote(address(spell));
            scheduleWaitAndCastFailDay();
        } else {
            revert("Office Hours Disabled");
        }
    }

    function testFailTooEarly() public {
        require(spell.officeHours() == spellValues.office_hours_enabled);
        if (spell.officeHours()) {
            vote(address(spell));
            scheduleWaitAndCastFailEarly();
        } else {
            revert("Office Hours Disabled");
        }
    }

    function testFailTooLate() public {
        require(spell.officeHours() == spellValues.office_hours_enabled);
        if (spell.officeHours()) {
            vote(address(spell));
            scheduleWaitAndCastFailLate();
        } else {
            revert("Office Hours Disabled");
        }
    }

    function testOnTime() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
    }

    function testCastCost() public {
        vote(address(spell));
        spell.schedule();

        castPreviousSpell();
        hevm.warp(spell.nextCastTime());
        uint256 startGas = gasleft();
        spell.cast();
        uint256 endGas = gasleft();
        uint256 totalGas = startGas - endGas;

        assertTrue(spell.done());
        // Fail if cast is too expensive
        assertTrue(totalGas <= 10 * MILLION);
    }

    // The specific date doesn't matter that much since function is checking for difference between warps
    function test_nextCastTime() public {
        hevm.warp(1606161600); // Nov 23, 20 UTC (could be cast Nov 26)

        vote(address(spell));
        spell.schedule();

        uint256 monday_1400_UTC = 1606744800; // Nov 30, 2020
        uint256 monday_2100_UTC = 1606770000; // Nov 30, 2020

        // Day tests
        hevm.warp(monday_1400_UTC);                                    // Monday,   14:00 UTC
        assertEq(spell.nextCastTime(), monday_1400_UTC);               // Monday,   14:00 UTC

        if (spell.officeHours()) {
            hevm.warp(monday_1400_UTC - 1 days);                       // Sunday,   14:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC);           // Monday,   14:00 UTC

            hevm.warp(monday_1400_UTC - 2 days);                       // Saturday, 14:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC);           // Monday,   14:00 UTC

            hevm.warp(monday_1400_UTC - 3 days);                       // Friday,   14:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC - 3 days);  // Able to cast

            hevm.warp(monday_2100_UTC);                                // Monday,   21:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC + 1 days);  // Tuesday,  14:00 UTC

            hevm.warp(monday_2100_UTC - 1 days);                       // Sunday,   21:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC);           // Monday,   14:00 UTC

            hevm.warp(monday_2100_UTC - 2 days);                       // Saturday, 21:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC);           // Monday,   14:00 UTC

            hevm.warp(monday_2100_UTC - 3 days);                       // Friday,   21:00 UTC
            assertEq(spell.nextCastTime(), monday_1400_UTC);           // Monday,   14:00 UTC

            // Time tests
            uint256 castTime;

            for(uint256 i = 0; i < 5; i++) {
                castTime = monday_1400_UTC + i * 1 days; // Next day at 14:00 UTC
                hevm.warp(castTime - 1 seconds); // 13:59:59 UTC
                assertEq(spell.nextCastTime(), castTime);

                hevm.warp(castTime + 7 hours + 1 seconds); // 21:00:01 UTC
                if (i < 4) {
                    assertEq(spell.nextCastTime(), monday_1400_UTC + (i + 1) * 1 days); // Next day at 14:00 UTC
                } else {
                    assertEq(spell.nextCastTime(), monday_1400_UTC + 7 days); // Next monday at 14:00 UTC (friday case)
                }
            }
        }
    }

    function testFail_notScheduled() public view {
        spell.nextCastTime();
    }

    function test_use_eta() public {
        hevm.warp(1606161600); // Nov 23, 20 UTC (could be cast Nov 26)

        vote(address(spell));
        spell.schedule();

        uint256 castTime = spell.nextCastTime();
        assertEq(castTime, spell.eta());
    }

    function testOSMs() private { // make public to use
        address READER = address(0);

        // Track OSM authorizations here
        assertEq(OsmAbstract(addr.addr("PIP_TOKEN")).bud(READER), 0);

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(OsmAbstract(addr.addr("PIP_TOKEN")).bud(READER), 1);
    }

    function testMedianizers() private { // make public to use
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Track Median authorizations here
        address PIP     = addr.addr("PIP_XXX");
        address MEDIAN  = OsmAbstract(PIP).src();
        assertEq(MedianAbstract(MEDIAN).bud(PIP), 1);
    }

    function test_auth() public {
        checkAuth(false);
    }

    function test_auth_in_sources() public {
        checkAuth(true);
    }

    // Verifies that the bytecode of the action of the spell used for testing
    // matches what we'd expect.
    //
    // Not a complete replacement for Etherscan verification, unfortunately.
    // This is because the DssSpell bytecode is non-deterministic because it
    // deploys the action in its constructor and incorporates the action
    // address as an immutable variable--but the action address depends on the
    // address of the DssSpell which depends on the address+nonce of the
    // deploying address. If we had a way to simulate a contract creation by
    // an arbitrary address+nonce, we could verify the bytecode of the DssSpell
    // instead.
    //
    // Vacuous until the deployed_spell value is non-zero.
    function test_bytecode_matches() public {
        address expectedAction = (new DssSpell()).action();
        address actualAction   = spell.action();
        uint256 expectedBytecodeSize;
        uint256 actualBytecodeSize;
        assembly {
            expectedBytecodeSize := extcodesize(expectedAction)
            actualBytecodeSize   := extcodesize(actualAction)
        }

        uint256 metadataLength = getBytecodeMetadataLength(expectedAction);
        assertTrue(metadataLength <= expectedBytecodeSize);
        expectedBytecodeSize -= metadataLength;

        metadataLength = getBytecodeMetadataLength(actualAction);
        assertTrue(metadataLength <= actualBytecodeSize);
        actualBytecodeSize -= metadataLength;

        assertEq(actualBytecodeSize, expectedBytecodeSize);
        uint256 size = actualBytecodeSize;
        uint256 expectedHash;
        uint256 actualHash;
        assembly {
            let ptr := mload(0x40)

            extcodecopy(expectedAction, ptr, 0, size)
            expectedHash := keccak256(ptr, size)

            extcodecopy(actualAction, ptr, 0, size)
            actualHash := keccak256(ptr, size)
        }
        assertEq(expectedHash, actualHash);
    }

    // Validate addresses in test harness match chainlog
    function test_chainlog_values() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        for(uint256 i = 0; i < chainLog.count(); i++) {
            (bytes32 _key, address _val) = chainLog.get(i);
            assertEq(_val, addr.addr(_key), concat("TestError/chainlog-addr-mismatch-", _key));
        }
    }

    // Ensure version is updated if chainlog changes
    function test_chainlog_version_bump() public {

        uint256                   _count = chainLog.count();
        string    memory        _version = chainLog.version();
        address[] memory _chainlog_addrs = new address[](_count);

        for(uint256 i = 0; i < _count; i++) {
            (, address _val) = chainLog.get(i);
            _chainlog_addrs[i] = _val;
        }

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        if (keccak256(abi.encodePacked(_version)) == keccak256(abi.encodePacked(chainLog.version()))) {
            // Fail if the version is not updated and the chainlog count has changed
            if (_count != chainLog.count()) {
                emit log_named_string("Error", concat("TestError/chainlog-version-not-updated-count-change-", _version));
                fail();
                return;
            }
            // Fail if the chainlog is the same size but local keys don't match the chainlog.
            for(uint256 i = 0; i < _count; i++) {
                (, address _val) = chainLog.get(i);
                if (_chainlog_addrs[i] != _val) {
                    emit log_named_string("Error", concat("TestError/chainlog-version-not-updated-address-change-", _version));
                    fail();
                    return;
                }
            }
        }
    }

    function tryVest(address vest, uint256 id) internal returns (bool ok) {
        (ok,) = vest.call(abi.encodeWithSignature("vest(uint256)", id));
    }

    function testVestDAI() private {
        VestAbstract vest = VestAbstract(addr.addr("MCD_VEST_DAI"));

        address SF_WALLET              = wallets.addr("SF_WALLET");
        address GRO_WALLET             = wallets.addr("GRO_WALLET");
        address KEEP3R_VEST_STREAMING = wallets.addr("KEEP3R_VEST_STREAMING");

        // Friday, 1 July 2022 00:00:00
        uint256 JUL_01_2022 = 1656633600;
        // Tuesday, 31 January 2023 00:00:00
        uint256 JAN_31_2023 = 1675123200;
        // Friday, 30 June 2023 00:00:00
        uint256 JUN_30_2023 = 1688083200;
        // Saturday, 1 July 2023 00:00:00
        uint256 JUL_01_2023 = 1688169600;

        assertEq(vest.ids(), 5);

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(vest.ids(), 8);

        assertEq(vest.cap(), 1 * MILLION * WAD / 30 days);

        assertEq(vest.usr(6), SF_WALLET);
        assertEq(vest.bgn(6), JUL_01_2022);
        assertEq(vest.clf(6), JUL_01_2022);
        assertEq(vest.fin(6), JUL_01_2023);
        assertEq(vest.fin(6), JUL_01_2022 + 365 days);
        assertEq(vest.mgr(6), address(0));
        assertEq(vest.res(6), 1);
        assertEq(vest.tot(6), 989004 * WAD);
        assertEq(vest.rxd(6), 0);

        assertEq(vest.usr(7), GRO_WALLET);
        assertEq(vest.bgn(7), JUL_01_2022);
        assertEq(vest.clf(7), JUL_01_2022);
        assertEq(vest.fin(7), JUN_30_2023);
        assertEq(vest.fin(7), JUL_01_2022 + 364 days);
        assertEq(vest.mgr(7), address(0));
        assertEq(vest.res(7), 1);
        assertEq(vest.tot(7), 2913995 * WAD);
        assertEq(vest.rxd(7), 0);

        assertEq(vest.usr(8), KEEP3R_VEST_STREAMING);
        assertEq(vest.bgn(8), JUL_01_2022);
        assertEq(vest.clf(8), JUL_01_2022);
        assertEq(vest.fin(8), JAN_31_2023);
        assertEq(vest.fin(8), JUL_01_2022 + 214 days);
        assertEq(vest.mgr(8), address(0));
        assertEq(vest.res(8), 1);
        assertEq(vest.tot(8), 215000 * WAD);
        assertEq(vest.rxd(8), 0);

        // Give admin powers to Test contract address and make the vesting unrestricted for testing
        giveAuth(address(vest), address(this));
        vest.unrestrict(6);
        vest.unrestrict(7);
        vest.unrestrict(8);

        uint256 prevBalance;
        hevm.warp(JUL_01_2022 + 365 days);
        prevBalance = dai.balanceOf(SF_WALLET);
        assertTrue(tryVest(address(vest), 6));
        assertEq(dai.balanceOf(SF_WALLET), prevBalance + 989004 * WAD);

        hevm.warp(JUL_01_2022 + 364 days);
        prevBalance = dai.balanceOf(GRO_WALLET);
        assertTrue(tryVest(address(vest), 7));
        assertEq(dai.balanceOf(GRO_WALLET), prevBalance + 2913995 * WAD);

        hevm.warp(JUL_01_2022 + 214 days);
        prevBalance = dai.balanceOf(KEEP3R_VEST_STREAMING);
        assertTrue(tryVest(address(vest), 8));
        assertEq(dai.balanceOf(KEEP3R_VEST_STREAMING), prevBalance + 215000 * WAD);
    }

    function testVestMKR() private {
        VestAbstract vest = VestAbstract(addr.addr("MCD_VEST_MKR_TREASURY"));
        assertEq(vest.ids(), 22);

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(vest.cap(), 1_100 * WAD / 365 days);
        assertEq(vest.ids(), 23);

        // Wed 01 Jun 2022 12:00:00 AM UTC
        uint256 JUN_01_2022 = 1654041600;
        // Thu 23 Nov 2023 12:00:00 AM UTC
        uint256 NOV_23_2023 = 1700697600;
        address SH_WALLET = wallets.addr("SH_WALLET");

        // -----
        assertEq(vest.usr(23), SH_WALLET);
        assertEq(vest.bgn(23), JUN_01_2022);
        assertEq(vest.clf(23), NOV_23_2023);
        assertEq(vest.fin(23), JUN_01_2022 + 4 * 365 days);
        assertEq(vest.mgr(23), wallets.addr("SH_WALLET"));
        assertEq(vest.res(23), 1);
        assertEq(vest.tot(23), 250 * 10**18);
        assertEq(vest.rxd(23), 0);


        uint256 prevBalance = gov.balanceOf(SH_WALLET);
        // 20220608 exec: Warp 2 years since cliff here is 18 months
        hevm.warp(JUN_01_2022 + 2 * 365 days);

        // // Give admin powers to Test contract address and make the vesting unrestricted for testing
        giveAuth(address(vest), address(this));
        vest.unrestrict(23);

        vest.vest(23);
        // 20220608 exec: Ensure 2 years vest accumulated
        assertEq(gov.balanceOf(SH_WALLET), prevBalance + (250 * WAD / 4) * 2);
    }

    function testMKRPayments() private {

        uint256 prevMkrPause = gov.balanceOf(address(pauseProxy));
        uint256 prevMkrRisk = gov.balanceOf(wallets.addr("RISK_WALLET_VEST"));

        uint256 amountRisk  = 175 * WAD;

        uint256 total = amountRisk;

        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(gov.balanceOf(address(pauseProxy)), prevMkrPause - total);
        assertEq(gov.balanceOf(wallets.addr("RISK_WALLET_VEST")), prevMkrRisk + amountRisk);
    }

    ////////////////////////////////////////
    //             RWA tests              //
    ////////////////////////////////////////

    RwaLiquidationLike oracle = RwaLiquidationLike(addr.addr("MIP21_LIQUIDATION_ORACLE"));

    address RWA008_A_OPERATOR              = 0x03f1A14A5b31e2f1751b6db368451dFCEA5A0439;
    address RWA008_A_MATE                  = 0xb9444802F0831A3EB9f90E24EFe5FfA20138d684;
    GemAbstract rwagem_008                 = GemAbstract(addr.addr("RWA008"));
    GemJoinAbstract rwajoin_008            = GemJoinAbstract(addr.addr("MCD_JOIN_RWA008_A"));
    RwaUrnLike rwaurn_008                  = RwaUrnLike(addr.addr("RWA008_A_URN"));
    RwaInputConduitLike rwaconduitin_008   = RwaInputConduitLike(addr.addr("RWA008_A_INPUT_CONDUIT"));
    RwaOutputConduitLike rwaconduitout_008 = RwaOutputConduitLike(addr.addr("RWA008_A_OUTPUT_CONDUIT"));

    GemAbstract rwagem_009         = GemAbstract(addr.addr("RWA009"));
    GemJoinAbstract rwajoin_009    = GemJoinAbstract(addr.addr("MCD_JOIN_RWA009_A"));
    RwaUrnLike rwaurn_009          = RwaUrnLike(addr.addr("RWA009_A_URN"));
    address RWA009_GENESIS_ADDRESS = addr.addr("RWA009_A_OUTPUT_CONDUIT");

    function testRWA008_OPERATOR_OWNS_RWA008_TOKEN_BEFORE_SPELL() public {
        assertEq(rwagem_008.balanceOf(RWA008_A_OPERATOR), 1 * WAD);
    }

    function testRWA008_MIP21_COMPONENTS_PERMISSIONS() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(rwaurn_008.can(RWA008_A_OPERATOR), 1, "RWA008: bad urn.can(operator)");
        assertEq(rwaurn_008.can(RWA008_A_MATE),     0, "RWA008: bad urn.can(mate)");

        assertEq(rwaconduitin_008.may(RWA008_A_OPERATOR), 1, "RWA008: bad inputConduit.may(operator)");
        assertEq(rwaconduitin_008.may(RWA008_A_MATE),     1, "RWA008: bad inputConduit.may(mate)");

        // We are not hope-ing the operator wallet in this spell because SocGen could not verify their addess in time.
        assertEq(rwaconduitout_008.can(RWA008_A_OPERATOR), 0, "RWA008: bad outputConduit.can(operator)");
        assertEq(rwaconduitout_008.can(RWA008_A_MATE),     0, "RWA008: bad outputConduit.can(mate)");
        assertEq(rwaconduitout_008.may(RWA008_A_OPERATOR), 1, "RWA008: bad outputConduit.may(operator)");
        assertEq(rwaconduitout_008.may(RWA008_A_MATE),     1, "RWA008: bad outputConduit.may(mate)");
    }

    function testRWA008_INTEGRATION_BUMP() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(oracle), address(this));

        (, address pip, , ) = oracle.ilks("RWA008-A");

        assertEq(
            DSValueAbstract(pip).read(),
            bytes32(uint256(30_043_520_665599336150000000)),
            "RWA008: Bad initial PIP value"
        );

        oracle.bump("RWA008-A", 40 * MILLION * WAD);

        assertEq(DSValueAbstract(pip).read(), bytes32(40 * MILLION * WAD), "RWA008: Bad PIP value after bump()");
    }

    function testRWA008_INTEGRATION_TELL() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(vat), address(this));
        giveAuth(address(oracle), address(this));

        (, , , uint48 tocPre) = oracle.ilks("RWA008-A");
        assertEq(uint256(tocPre), 0, "RWA008: `toc` is not 0 before tell()");
        assertTrue(oracle.good("RWA008-A"), "RWA008: Oracle not good before tell()");

        vat.file("RWA008-A", "line", 0);
        oracle.tell("RWA008-A");

        (, , , uint48 tocPost) = oracle.ilks("RWA008-A");
        assertGt(uint256(tocPost), 0, "RWA008: `toc` is not set after tell()");
        assertTrue(!oracle.good("RWA008-A"), "RWA008: Oracle still good after tell()");
    }

    function testRWA008_INTEGRATION_TELL_CURE_GOOD() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(vat), address(this));
        giveAuth(address(oracle), address(this));

        vat.file("RWA008-A", "line", 0);
        oracle.tell("RWA008-A");

        assertTrue(!oracle.good("RWA008-A"), "RWA008: Oracle still good after tell()");

        oracle.cure("RWA008-A");

        assertTrue(oracle.good("RWA008-A"), "RWA008: Oracle not good after cure()");
        (, , , uint48 toc) = oracle.ilks("RWA008-A");
        assertEq(uint256(toc), 0, "RWA008: `toc` not zero after cure()");
    }

    function testFailRWA008_INTEGRATION_CURE_BEFORE_TELL() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(oracle), address(this));

        oracle.cure("RWA008-A");
    }

    function testRWA008_INTEGRATION_TELL_CULL() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(vat), address(this));
        giveAuth(address(oracle), address(this));

        assertTrue(oracle.good("RWA008-A"));

        vat.file("RWA008-A", "line", 0);
        oracle.tell("RWA008-A");

        assertTrue(!oracle.good("RWA008-A"), "RWA008: Oracle still good after tell()");

        oracle.cull("RWA008-A", addr.addr("RWA008_A_URN"));

        assertTrue(!oracle.good("RWA008-A"), "RWA008: Oracle still good after cull()");
        (, address pip, , ) = oracle.ilks("RWA008-A");
        assertEq(DSValueAbstract(pip).read(), bytes32(0), "RWA008: Oracle PIP value not set to zero after cull()");
    }

    function testRWA008_OPERATOR_LOCK_DRAW_CONDUITS_WIPE_FREE() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // Let rate be > 1
        hevm.warp(block.timestamp + 1 days);
        jug.drip("RWA008-A");

        // set the balance of this contract
        hevm.store(address(rwagem_008), keccak256(abi.encode(address(this), uint256(3))), bytes32(uint256(1 * WAD)));
        assertEq(rwagem_008.balanceOf(address(this)), 1 * WAD);
        // setting address(this) as operator
        hevm.store(address(rwaurn_008), keccak256(abi.encode(address(this), uint256(1))), bytes32(uint256(1)));
        assertEq(rwaurn_008.can(address(this)), 1);

        (uint256 preInk, uint256 preArt) = vat.urns("RWA008-A", address(rwaurn_008));

        rwagem_008.approve(address(rwaurn_008), 1 * WAD);
        rwaurn_008.lock(1 * WAD);
        assertEq(dai.balanceOf(address(rwaconduitout_008)), 0, "RWA008: Dangling Dai in input conduit before draw()");
        rwaurn_008.draw(1 * WAD);

        (, uint256 rate, , , ) = vat.ilks("RWA008-A");

        uint256 dustInVat = vat.dai(address(rwaurn_008));

        (uint256 ink, uint256 art) = vat.urns("RWA008-A", address(rwaurn_008));
        assertEq(ink, 1 * WAD + preInk, "RWA008: Bad `ink` after draw()");
        uint256 currArt = ((1 * RAD + dustInVat) / rate) + preArt;
        assertTrue(art >= currArt - 2 && art <= currArt + 2, "RWA008: Bad `art` after draw()"); // approximation for vat rounding
        assertEq(dai.balanceOf(address(rwaconduitout_008)), 1 * WAD, "RWA008: Dai not sent to output conduit after draw()");

        // wards
        giveAuth(address(rwaconduitout_008), address(this));
        // can
        hevm.store(address(rwaconduitout_008), keccak256(abi.encode(address(this), uint256(1))), bytes32(uint256(1)));
        assertEq(rwaconduitout_008.can(address(this)), 1);
        // may
        hevm.store(address(rwaconduitout_008), keccak256(abi.encode(address(this), uint256(6))), bytes32(uint256(1)));
        assertEq(rwaconduitout_008.may(address(this)), 1);

        rwaconduitout_008.pick(address(this));
        rwaconduitout_008.push();

        assertEq(dai.balanceOf(address(rwaconduitout_008)), 0, "RWA008: Output conduit still holds Dai after push()");
        assertEq(dai.balanceOf(address(this)), 1 * WAD, "RWA008: Dai not sent to destination after push()");

        (ink, art) = vat.urns("RWA008-A", address(rwaurn_008));
        assertEq(ink, 1 * WAD + preInk, "RWA008: Bad `ink` after push()");
        currArt = ((1 * RAD + dustInVat) / rate) + preArt;
        assertTrue(art >= currArt - 2 && art <= currArt + 2, "RWA008: Bad `art` after push()"); // approximation for vat rounding

        hevm.warp(block.timestamp + 10 days);
        jug.drip("RWA008-A");

        (, rate, , , ) = vat.ilks("RWA008-A");

        uint256 daiToPay = (art * rate - dustInVat) / RAY + 2; // extra wei rounding

        hevm.store(
            address(vat),
            keccak256(abi.encode(address(this), uint256(5))),
            bytes32(daiToPay * RAY)
        ); // Forcing extra dai balance for addres(this) on the Vat
        vat.hope(address(daiJoin));
        daiJoin.exit(address(this), daiToPay);
        // wards
        giveAuth(address(rwaconduitin_008), address(this));
        // may
        hevm.store(address(rwaconduitin_008), keccak256(abi.encode(address(this), uint256(4))), bytes32(uint256(1)));
        assertEq(rwaconduitin_008.may(address(this)), 1);

        assertEq(dai.balanceOf(address(rwaconduitin_008)), 0, "RWA008: Dangling Dai in input conduit before transfer()");
        dai.transfer(address(rwaconduitin_008), daiToPay);
        assertEq(dai.balanceOf(address(rwaconduitin_008)), daiToPay, "RWA008: Dai not sent to input conduit after transfer()");
        rwaconduitin_008.push();

        assertEq(dai.balanceOf(address(rwaurn_008)), daiToPay, "RWA008: Dai not sent to the urn after push()");
        assertEq(dai.balanceOf(address(rwaconduitin_008)), 0, "RWA008: Dangling Dai in input conduit after push()");

        rwaurn_008.wipe(daiToPay);
        rwaurn_008.free(1 * WAD);

        (ink, art) = vat.urns("RWA008-A", address(rwaurn_008));
        assertEq(ink, preInk, "RWA008: Bad `ink` after free()");
        assertLt(art, 4, "RWA008: Bad `art` - larger than conversion error dust after wipe()"); // wad -> rad conversion in wipe leaves some dust
    }

    function testRWA008_OPERATOR_LOCK_DRAW_CAGE() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        // set the balance of this contract
        hevm.store(address(rwagem_008), keccak256(abi.encode(address(this), uint256(3))), bytes32(uint256(1 * WAD)));
        assertEq(rwagem_008.balanceOf(address(this)), 1 * WAD, "RWA008: wrong gem balance");
        // setting address(this) as operator
        hevm.store(address(rwaurn_008), keccak256(abi.encode(address(this), uint256(1))), bytes32(uint256(1)));
        assertEq(rwaurn_008.can(address(this)), 1, "RWA008: address(this) not operator");

        rwagem_008.approve(address(rwaurn_008), 1 * WAD);
        rwaurn_008.lock(1 * WAD);
        assertEq(dai.balanceOf(address(rwaconduitout_008)), 0, "RWA008: dai balance is not zero for output conduit");
        rwaurn_008.draw(1_000_000 * WAD);

        (uint256 ink, uint256 art) = vat.urns("RWA008-A", address(rwaurn_008));
        assertEq(ink, 1 * WAD, "RWA008: wrong ink in urn");
        assertEq(art, 1_000_000 * WAD, "RWA008: wrong art in urn"); // rate == 1 RAY (drip was never called and passed 0 seconds after init)

        // wards
        giveAuth(address(rwaconduitout_008), address(this));
        // can
        hevm.store(address(rwaconduitout_008), keccak256(abi.encode(address(this), uint256(1))), bytes32(uint256(1)));
        assertEq(rwaconduitout_008.can(address(this)), 1, "RWA008: output conduit not operator");
        // may
        hevm.store(address(rwaconduitout_008), keccak256(abi.encode(address(this), uint256(6))), bytes32(uint256(1)));
        assertEq(rwaconduitout_008.may(address(this)), 1, "RWA008: output conduit not mate");

        assertEq(dai.balanceOf(address(rwaconduitout_008)), 1_000_000 * WAD, "RWA008: wrong dai balance output conduit");

        rwaconduitout_008.pick(address(this));

        rwaconduitout_008.push();

        assertEq(dai.balanceOf(address(this)), 1_000_000 * WAD, "RWA008: wrong dai balance address(this)");

        giveAuth(address(end), address(this));
        end.cage();
        end.cage("RWA008-A");

        end.skim("RWA008-A", address(rwaurn_008));

        (ink, art) = vat.urns("RWA008-A", address(rwaurn_008));
        // `skim()` should take only enough gem value in DAI to cover the current debt position:
        //
        //    skimmedInk = currentDebt / gemPriceInDai
        //
        // The remaining `ink` can be obtained by:
        //
        //    ink = previousInk - skimmedInk
        //
        // We need to be careful because the gem price is stored as a WAD, so to make sure the units align in the
        // expression above, we need to divide the price by WAD.
        //
        //     gem*WAD       dai*WAD      /       (dai/gem)*WAD            / WAD
        //        v             v                       v                     v
        //    1 * WAD - (1_000_000 * WAD) / (30_043_520_665599336150000000 / WAD)
        //
        // While mathematically correct, the expression will present a rounding error with Solidity's integer math, so
        // we reorder it as follows:
        uint256 skimmedInk = (1_000_000 * WAD) * WAD / 30_043_520_665599336150000000;
        assertEq(ink, 1 * WAD - skimmedInk, "RWA008: wrong ink in urn after skim");
        assertEq(art, 0, "RWA008: wrong art in urn after skim");

        hevm.warp(block.timestamp + end.wait());

        vow.heal(min(vat.dai(address(vow)), sub(sub(vat.sin(address(vow)), vow.Sin()), vow.Ash())));

        // Removing the surplus to allow continuing the execution.
        hevm.store(
            address(vat),
            keccak256(abi.encode(address(vow), uint256(5))),
            bytes32(uint256(0))
        );

        end.thaw();

        end.flow("RWA008-A");

        dai.approve(address(daiJoin), 1_000_000 * WAD);
        daiJoin.join(address(this), 1_000_000 * WAD);

        vat.hope(address(end));
        end.pack(1_000_000 * WAD);

        assertEq(vat.gem("RWA008-A", address(this)), 0, "RWA008: wrong vat gem");
        assertEq(rwagem_008.balanceOf(address(this)), 0, "RWA008: wrong gem balance");
        end.cash("RWA008-A", 1_000_000 * WAD);
        assertGt(vat.gem("RWA008-A", address(this)), 0, "RWA008: wrong vat gem after cash");
        assertEq(rwagem_008.balanceOf(address(this)), 0, "RWA008: wrong gem balance after cash");
        rwajoin_008.exit(address(this), vat.gem("RWA008-A", address(this)));
        assertEq(vat.gem("RWA008-A", address(this)), 0, "RWA008: wrong vat gem after exit");
        assertGt(rwagem_008.balanceOf(address(this)), 0, "RWA008: wrong gem balance after exit");
    }

    function testRWA009_PAUSE_PROXY_OWNS_RWA009_TOKEN_BEFORE_SPELL() public {
        assertEq(rwagem_009.balanceOf(addr.addr('MCD_PAUSE_PROXY')), 1 * WAD);
    }

    function testRWA009_MIP21_COMPONENTS_PERMISSIONS() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        assertEq(rwaurn_009.can(addr.addr('MCD_PAUSE_PROXY')), 1);
    }

    function testRWA009_INTEGRATION_BUMP() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(oracle), address(this));

        (, address pip, , ) = oracle.ilks("RWA009-A");

        assertEq(DSValueAbstract(pip).read(), bytes32(100 * MILLION * WAD), "RWA009: Bad initial PIP value");

        oracle.bump("RWA009-A", 110 * MILLION * WAD);

        assertEq(DSValueAbstract(pip).read(), bytes32(110 * MILLION * WAD), "RWA009: Bad PIP value after bump()");
    }

    function testRWA009_INTEGRATION_TELL() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(vat), address(this));
        giveAuth(address(oracle), address(this));

        (, , , uint48 tocPre) = oracle.ilks("RWA009-A");
        assertEq(uint256(tocPre), 0, "RWA009: `toc` is not 0 before tell()");
        assertTrue(oracle.good("RWA009-A"), "RWA009: Oracle not good before tell()");

        vat.file("RWA009-A", "line", 0);
        oracle.tell("RWA009-A");

        (, , , uint48 tocPost) = oracle.ilks("RWA009-A");
        assertGt(uint256(tocPost), 0, "RWA009: `toc` is not set after tell()");
        assertTrue(!oracle.good("RWA009-A"), "RWA009: Oracle still good after tell()");
    }

    function testRWA009_INTEGRATION_TELL_CURE_GOOD() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(vat), address(this));
        giveAuth(address(oracle), address(this));

        vat.file("RWA009-A", "line", 0);
        oracle.tell("RWA009-A");

        assertTrue(!oracle.good("RWA009-A"), "RWA009: Oracle still good after tell()");

        oracle.cure("RWA009-A");

        assertTrue(oracle.good("RWA009-A"), "RWA009: Oracle not good after cure()");
        (, , , uint48 toc) = oracle.ilks("RWA009-A");
        assertEq(uint256(toc), 0, "RWA009: `toc` not zero after cure()");
    }

    function testFailRWA009_INTEGRATION_CURE_BEFORE_TELL() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(oracle), address(this));

        oracle.cure("RWA009-A");
    }

    function testRWA009_INTEGRATION_TELL_CULL() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        giveAuth(address(vat), address(this));
        giveAuth(address(oracle), address(this));

        assertTrue(oracle.good("RWA009-A"));

        vat.file("RWA009-A", "line", 0);
        oracle.tell("RWA009-A");

        assertTrue(!oracle.good("RWA009-A"), "RWA009: Oracle still good after tell()");

        oracle.cull("RWA009-A", addr.addr("RWA009_A_URN"));

        assertTrue(!oracle.good("RWA009-A"), "RWA009: Oracle still good after cull()");
        (, address pip, , ) = oracle.ilks("RWA009-A");
        assertEq(DSValueAbstract(pip).read(), bytes32(0), "RWA009: Oracle PIP value not set to zero after cull()");
    }

    function testRWA009_SPELL_OPERATOR_LOCK_DRAW_WIPE_FREE() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        uint256 drawAmount = 25_000_000 * WAD;

        // setting address(this) as operator
        hevm.store(address(rwaurn_009), keccak256(abi.encode(address(this), uint256(1))), bytes32(uint256(1)));
        assertEq(rwaurn_009.can(address(this)), 1);

        // Check if spell lock 1 * WAD of RWA009
        assertEq(rwagem_009.balanceOf(addr.addr('MCD_PAUSE_PROXY')), 0, "RWA009: gem not transfered from the pause proxy");
        assertEq(rwagem_009.balanceOf(address(rwajoin_009)), 1 * WAD, "RWA009: gem not locked into the urn");

        // Check if spell draw 25mm DAI to GENESIS
        assertEq(dai.balanceOf(address(RWA009_GENESIS_ADDRESS)), drawAmount, "RWA009: Dai drawn was not send to the recipient");

        (uint256 ink, uint256 art) = vat.urns("RWA009-A", address(rwaurn_009));
        assertEq(art, drawAmount, "RWA009: bad `art` after spell"); // DAI drawn == art as rate should always be 1 RAY
        assertEq(ink, 1 * WAD, "RWA009: bad `ink` after spell"); // Whole unit of collateral is locked

        hevm.warp(block.timestamp + 10 days);
        jug.drip("RWA009-A");

        (, uint256 rate,,,) = vat.ilks("RWA009-A");
        assertEq(rate, RAY, 'RWA009: bad `rate`'); // rate keeps being 1 RAY

        // as we have SF 0 we need to pay exectly the same amount of DAI we have drawn
        uint256 daiToPay = drawAmount;

        // transfer DAI to the URN
        hevm.store(
            address(vat),
            keccak256(abi.encode(address(this), uint256(5))),
            bytes32(daiToPay * RAY)
        ); // Forcing extra dai balance for addres(this) on the Vat
        vat.hope(address(daiJoin));
        daiJoin.exit(address(this), daiToPay);
        dai.transfer(address(rwaurn_009), daiToPay);
        assertEq(dai.balanceOf(address(rwaurn_009)), daiToPay, "Balance of the URN doesnt match");

        // repay debt and free our collateral
        rwaurn_009.wipe(daiToPay);
        rwaurn_009.free(1 * WAD);

        // check if MCD_PAUSE_PROXY have RWA009 Tokens
        assertEq(rwagem_009.balanceOf(address(this)), 1 * WAD, "RWA009: gem not sent back to the caller");

        // check if we have 0 collateral and outstanding debt in the VAT
        (ink, art) = vat.urns("RWA009-A", address(rwaurn_009));
        assertEq(ink, 0, "RWA009: bad `ink` after free()");
        assertEq(art, 0, "RWA009: bad `art` after wipe()");
    }

    function testRWA009_OPERATOR_LOCK_DRAW_CAGE() public {
        vote(address(spell));
        scheduleWaitAndCast(address(spell));
        assertTrue(spell.done());

        uint256 drawAmount = 25_000_000 * WAD;

        // setting address(this) as operator
        hevm.store(address(rwaurn_009), keccak256(abi.encode(address(this), uint256(1))), bytes32(uint256(1)));
        assertEq(rwaurn_009.can(address(this)), 1, "RWA009: address(this) not operator");

        // Check if spell lock 1 * WAD of RWA009
        assertEq(rwagem_009.balanceOf(address(rwajoin_009)), 1 * WAD, "RWA009: wrong gem balance in join");

        // Check if spell draw 25mm DAI to GENESIS
        assertEq(dai.balanceOf(address(RWA009_GENESIS_ADDRESS)), drawAmount, "RWA009: wrong dai balance in output conduit");

        (uint256 ink, uint256 art) = vat.urns("RWA009-A", address(rwaurn_009));
        assertEq(ink, 1 * WAD, "RWA009: wrong ink in urn"); // Whole unit of collateral is locked
        assertEq(art, drawAmount, "RWA009: wrong art in urn"); // DAI drawn == art as rate should always be 1 RAY

        giveAuth(address(end), address(this));
        end.cage();
        end.cage("RWA009-A");

        end.skim("RWA009-A", address(rwaurn_009));

        (ink, art) = vat.urns("RWA009-A", address(rwaurn_009));
        uint256 skimmedInk = 25_000_000 * WAD / 100_000_000;
        assertEq(ink, 1 * WAD - skimmedInk, "RWA009: wrong ink in urn after skim");
        assertEq(art, 0, "RWA009: wrong art in urn after skim");

        hevm.warp(block.timestamp + end.wait());

        vow.heal(min(vat.dai(address(vow)), sub(sub(vat.sin(address(vow)), vow.Sin()), vow.Ash())));

        // Removing the surplus to allow continuing the execution.
        hevm.store(
            address(vat),
            keccak256(abi.encode(address(vow), uint256(5))),
            bytes32(uint256(0))
        );

        end.thaw();

        end.flow("RWA009-A");

        giveTokens(address(dai), 1_000_000 * WAD);
        dai.approve(address(daiJoin), 1_000_000 * WAD);
        daiJoin.join(address(this), 1_000_000 * WAD);

        vat.hope(address(end));
        end.pack(1_000_000 * WAD);

        assertEq(vat.gem("RWA009-A", address(this)), 0, "RWA009: wrong vat gem");
        assertEq(rwagem_009.balanceOf(address(this)), 0, "RWA009: wrong gem balance");
        end.cash("RWA009-A", 1_000_000 * WAD);
        assertGt(vat.gem("RWA009-A", address(this)), 0, "RWA009: wrong vat gem after cash");
        assertEq(rwagem_009.balanceOf(address(this)), 0, "RWA009: wrong gem balance after cash");
        rwajoin_009.exit(address(this), vat.gem("RWA009-A", address(this)));
        assertEq(vat.gem("RWA009-A", address(this)), 0, "RWA009: wrong vat gem after exit");
        assertGt(rwagem_009.balanceOf(address(this)), 0, "RWA009: wrong gem balance after exit");
    }
}
